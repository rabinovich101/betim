generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  email            String         @unique
  username         String         @unique
  hashedPassword   String
  fullName         String
  dateOfBirth      DateTime
  country          String
  state            String?
  phoneNumber      String?
  role             UserRole       @default(USER)
  isActive         Boolean        @default(true)
  isVerified       Boolean        @default(false)
  kycStatus        KycStatus      @default(PENDING)
  emailVerified    DateTime?
  balance          Decimal        @default(0) @db.Decimal(10, 2)
  bonusBalance     Decimal        @default(0) @db.Decimal(10, 2)
  totalWagered     Decimal        @default(0) @db.Decimal(10, 2)
  totalWon         Decimal        @default(0) @db.Decimal(10, 2)
  currency         String         @default("USD")
  timezone         String         @default("UTC")
  twoFactorEnabled Boolean        @default(false)
  twoFactorSecret  String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  lastLoginAt      DateTime?
  promoCodeId      String?
  bets             Bet[]
  betSlips         BetSlip[]
  favoriteTeams    FavoriteTeam[]
  notifications    Notification[]
  sessions         Session[]
  transactions     Transaction[]
  promoCode        PromoCode?     @relation(fields: [promoCodeId], references: [id])

  @@index([email])
  @@index([username])
  @@index([country, state])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  userAgent String?
  ipAddress String?
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model Sport {
  id           String  @id @default(cuid())
  name         String  @unique
  slug         String  @unique
  icon         String?
  displayOrder Int     @default(0)
  isActive     Boolean @default(true)
  events       Event[]

  @@index([slug])
}

model Team {
  id         String         @id @default(cuid())
  name       String
  shortName  String?
  logo       String?
  country    String?
  awayEvents Event[]        @relation("AwayTeam")
  homeEvents Event[]        @relation("HomeTeam")
  favoriteBy FavoriteTeam[]

  @@index([name])
}

model Event {
  id          String      @id @default(cuid())
  sportId     String
  homeTeamId  String
  awayTeamId  String
  title       String?
  startTime   DateTime
  endTime     DateTime?
  status      EventStatus @default(UPCOMING)
  homeScore   Int?
  awayScore   Int?
  currentTime Int?
  period      String?
  venue       String?
  competition String?
  round       String?
  isLive      Boolean     @default(false)
  isFeatured  Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  bets        Bet[]
  awayTeam    Team        @relation("AwayTeam", fields: [awayTeamId], references: [id])
  homeTeam    Team        @relation("HomeTeam", fields: [homeTeamId], references: [id])
  sport       Sport       @relation(fields: [sportId], references: [id])
  markets     Market[]

  @@index([sportId])
  @@index([startTime])
  @@index([status])
  @@index([isLive])
}

model Market {
  id          String     @id @default(cuid())
  eventId     String
  type        MarketType
  name        String
  isActive    Boolean    @default(true)
  isSuspended Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  bets        Bet[]
  event       Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  odds        Odds[]

  @@unique([eventId, type])
  @@index([eventId])
  @@index([type])
}

model Odds {
  id            String   @id @default(cuid())
  marketId      String
  selection     String
  value         Decimal  @db.Decimal(5, 2)
  previousValue Decimal? @db.Decimal(5, 2)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  bets          Bet[]
  market        Market   @relation(fields: [marketId], references: [id], onDelete: Cascade)

  @@index([marketId])
  @@index([selection])
}

model Bet {
  id               String    @id @default(cuid())
  userId           String
  eventId          String
  marketId         String
  oddsId           String
  betSlipId        String?
  stake            Decimal   @db.Decimal(10, 2)
  odds             Decimal   @db.Decimal(5, 2)
  selection        String
  potentialWin     Decimal   @db.Decimal(10, 2)
  status           BetStatus @default(PENDING)
  settledAt        DateTime?
  winAmount        Decimal?  @db.Decimal(10, 2)
  cashoutAvailable Boolean   @default(false)
  cashoutValue     Decimal?  @db.Decimal(10, 2)
  cashedOutAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  betSlip          BetSlip?  @relation(fields: [betSlipId], references: [id])
  event            Event     @relation(fields: [eventId], references: [id])
  market           Market    @relation(fields: [marketId], references: [id])
  oddsRelation     Odds      @relation(fields: [oddsId], references: [id])
  user             User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([eventId])
  @@index([status])
  @@index([betSlipId])
}

model BetSlip {
  id           String    @id @default(cuid())
  userId       String
  type         BetType   @default(SINGLE)
  totalStake   Decimal   @db.Decimal(10, 2)
  totalOdds    Decimal   @db.Decimal(8, 2)
  potentialWin Decimal   @db.Decimal(10, 2)
  status       BetStatus @default(PENDING)
  settledAt    DateTime?
  winAmount    Decimal?  @db.Decimal(10, 2)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  bets         Bet[]
  user         User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
}

model Transaction {
  id            String            @id @default(cuid())
  userId        String
  type          TransactionType
  amount        Decimal           @db.Decimal(10, 2)
  currency      String            @default("USD")
  status        TransactionStatus @default(PENDING)
  paymentMethod String?
  reference     String?           @unique
  externalId    String?
  description   String?
  metadata      Json?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  completedAt   DateTime?
  user          User              @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([reference])
}

model PromoCode {
  id            String    @id @default(cuid())
  code          String    @unique
  description   String?
  discountType  String
  discountValue Decimal   @db.Decimal(10, 2)
  minDeposit    Decimal?  @db.Decimal(10, 2)
  maxDiscount   Decimal?  @db.Decimal(10, 2)
  usageLimit    Int?
  usageCount    Int       @default(0)
  userLimit     Int       @default(1)
  validFrom     DateTime  @default(now())
  validUntil    DateTime?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  users         User[]

  @@index([code])
  @@index([isActive])
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  isRead    Boolean   @default(false)
  readAt    DateTime?
  metadata  Json?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
}

model FavoriteTeam {
  id        String   @id @default(cuid())
  userId    String
  teamId    String
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@index([userId])
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum KycStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum EventStatus {
  UPCOMING
  LIVE
  FINISHED
  CANCELLED
  POSTPONED
}

enum MarketType {
  MATCH_WINNER
  OVER_UNDER
  BOTH_TEAMS_SCORE
  HANDICAP
  CORRECT_SCORE
  FIRST_GOAL
  HALF_TIME_RESULT
  DOUBLE_CHANCE
}

enum BetStatus {
  PENDING
  WON
  LOST
  VOID
  CASHOUT
}

enum BetType {
  SINGLE
  ACCUMULATOR
  SYSTEM
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  BET_PLACED
  BET_WON
  BET_REFUND
  BONUS
  CASHOUT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}
